单机架构：
	缺点：
		1.数据量太大，超出一台服务器承受
		2.读写操作量大，超出一台服务器承受
		3.单点问题
		
主从架构：
	读写分离，主库写操作，从库读操作。主从库之间采用数据库的同步技术进行数据同步。
	为什么采用主从架构：
		主从架构主要是为了通过读写分离技术，降低数据库的访问压力，减少数据库的并发访问量；同时，可以解决单点故障的问题。
	
	其缺点为：
		并不能解决业务数据量增大的问题
		当单一的读操作或写操作超过单台数据库的最大访问量时，该方案也就不可用了
		
		
分库分表：
	通过将单库、单表数据拆分，分散到不同库或表中，降低单一数据库的存储瓶颈及访问瓶颈，缓解数据库压力的一种手段。
	水平拆分：水平拆分主要解决的是数据库单表数据行数过大，存在读写、存储性能瓶颈。
		水平拆分即将单表数据按一定规则分配到同库的几张表中或其它库的表中，使得各表所持有的数据变少。同时在访问数据时，通过既定的规则在一定程度上可以帮助我们快速定位到该数据所在的库或表。
		库内分表时同样会导致竞争CPU、内存等操作，所以不是很推荐；而分库分表则可以很好的避免这个问题，达到减轻数据库压力、存储瓶颈的目的。
	水平切分中数据分片的常见规则：
		1.范围分片：即按照主键范围或时间范围进行分片，例如将1~9999的数据放到一张表中，以此类推。
			优点：单表大小可控
				后期扩展容易，直接添加库节点即可
				使用分片字段进行范围查找时，这种连续分片可快速定位到数据，很大程度上避免了跨分片查询的问题。
			缺点：
				存在热点数据访问瓶颈，对于一段范围内的数据，很有可能出现访问热点数据，此时该分片访问量激增。
		2.hash分片：即对某一字段进行hash取模（mod）运算，例如根据某一字段分片到四个库中，余数为0的放第一个库，余数为1的放第二个库，以此类推。
			优点：数据分片相对均匀，不太容易出现热点数据问题
			缺点：
				扩展比较困难，需要进行数据的迁移(一致性hash可以避免)
				容易面临跨分片查询的问题。尤其是在查询条件中没有携带分片字段，则无法定位数据所在的库，需要多库同时查询，然后再内存中汇总数据，取最小集（合并后的最小集）返回。
	
	垂直拆分：
		垂直分库：垂直分库即将一个数据库中关联度较低的部分表拆分到其它数据库中，降低单一库中的数据耦合。其与微服务的概念类似，可以不同的服务使用不同的业务库。
		垂直分表：即将一个表中的一部分字段进行拆分，拆分成扩展表，这样对于字段较多的大表是很有用的，便于开发与维护。
		
	垂直拆分的优点：
		业务拆分清晰，便于开发维护
		能在一定程度上提升IO、数据库连接数、单机硬件资源瓶颈等。
	缺点：
		分布式事务处理复杂。
		依然存在单表数量过大的问题。
		

分库分表带来的问题：

	1.事务一致性问题
		（1）可能出现跨库事务及跨数据分片事务
		（2）数据一致性的问题需要结合业务来分析是需要实时一致性还是最终一致性
	2.跨节点join联查
		当分库后，数据处于不同的节点上，此时跨库join的处理麻烦，性能较差
	3.跨节点分页、排序、函数等问题
		不同节点之间分页是对指定字段的分页，不同数据节点间分页，要考虑不同节点数据合并后再分页等问题
		排序也是一样的，数据分散在不同的节点中，排序就需要综合考虑不同节点间数据的关系来排序。
	4.全局主键避免重复
		在分库分表环境中，由于表数据存在于不同数据库，所以主键需要避免重复。同时还需要考虑主键的设置性能方面的合理性等。
	5.数据迁移、扩容问题
		不同的分库分表方案带来的数据迁移、后期扩容问题的复杂度是不一样的，需要综合考虑。